container:
  dockerfile: ci/cirrus.Dockerfile

env:
  EMAIL: cirrus@cirrus-ci.org

sim_cache_fpr_template: &SIM_CACHE_FPR_TEMPLATE
    fingerprint_script: echo $CIRRUS_BUILD_ID $DEVICE Simulator

device_matrix_template: &DEVICE_MATRIX_TEMPLATE
  - env:
      DEVICE: --trezor-1
    depends_on:
      - Trezor 1 Sim Builder
      - dist_builder
      - dogecoind_builder
    sim_work_cache:
      folder: test/work/trezor-firmware
      << : *SIM_CACHE_FPR_TEMPLATE
  - env:
      DEVICE: --trezor-t
    depends_on:
      - Trezor T Sim Builder
      - dist_builder
      - dogecoind_builder
    sim_work_cache:
      folder: test/work/trezor-firmware
      << : *SIM_CACHE_FPR_TEMPLATE
  - env:
      DEVICE: --ledger
    depends_on:
      - Ledger Sim Builder
      - dist_builder
      - dogecoind_builder
    sim_work_cache:
      folder: test/work/speculos
      << : *SIM_CACHE_FPR_TEMPLATE
    sim_install_script:
      - poetry run pip install construct pyelftools mnemonic jsonschema
      - pip install construct pyelftools mnemonic jsonschema
  - env:
      DEVICE: --keepkey
    depends_on:
      - Keepkey Sim Builder
      - dist_builder
      - dogecoind_builder
    sim_work_cache:
      folder: test/work/keepkey-firmware
      << : *SIM_CACHE_FPR_TEMPLATE

sim_build_matrix_template: &SIM_BUILD_MATRIX_TEMPLATE
  - env:
      DEVICE: --trezor-1
    name: Trezor 1 Sim Builder
    sim_work_cache:
      folder: test/work/trezor-firmware
      << : *SIM_CACHE_FPR_TEMPLATE
  - env:
      DEVICE: --trezor-t
    name: Trezor T Sim Builder
    sim_work_cache:
      folder: test/work/trezor-firmware
      << : *SIM_CACHE_FPR_TEMPLATE
  - env:
      DEVICE: --ledger
    name: Ledger Sim Builder
    sim_work_cache:
      folder: test/work/speculos
      << : *SIM_CACHE_FPR_TEMPLATE
  - env:
      DEVICE: --keepkey
    name: Keepkey Sim Builder
    sim_work_cache:
      folder: test/work/keepkey-firmware
      << : *SIM_CACHE_FPR_TEMPLATE

dogecoind_cache_template: &BITCOIND_CACHE_TEMPLATE
  dogecoind_work_cache:
    folder: test/work/dogecoin
    fingerprint_script: echo $CIRRUS_BUILD_ID dogecoind

dist_cache_template: &DIST_CACHE_TEMPLATE
  dist_cache:
    folder: dist
    fingerprint_script: echo $CIRRUS_BUILD_ID dist

lint_task:
  test_script:
    - flake8

basic_test_task:
  install_script:
    - poetry install
  matrix:
    - name: Type Check
      type_check_script: >
        poetry run
        mypy
        hwi.py
        hwilib/_base58.py
        hwilib/_bech32.py
        hwilib/_cli.py
        hwilib/commands.py
        hwilib/common.py
        hwilib/descriptor.py
        hwilib/devices/bitbox02.py
        hwilib/devices/coldcard.py
        hwilib/devices/digitalbitbox.py
        hwilib/devices/__init__.py
        hwilib/devices/keepkey.py
        hwilib/devices/ledger.py
        hwilib/devices/trezor.py
        hwilib/errors.py
        hwilib/_script.py
        hwilib/_serialize.py
        hwilib/tx.py
        hwilib/hwwclient.py
        hwilib/__init__.py
        hwilib/key.py
        hwilib/udevinstaller.py
    - name: Non-Device Tests
      test_script: cd test; poetry run ./run_tests.py; cd ..

wine_builder_task:
  container:
    dockerfile: contrib/build.Dockerfile
  build_script:
    - contrib/build_wine.sh
    - ls dist/*
    - sha256sum dist/*.tar.gz ||:

dogecoind_builder_task:
  << : *BITCOIND_CACHE_TEMPLATE
  dogecoind_cache:
    folder: test/work/dogecoin
  ccache_cache:
    folder: /root/.ccache
  env:
    BUILD_BITCOIND: 1
  build_script: cd test; ./setup_environment.sh --dogecoind; cd ..

sim_builder_task:
  matrix:
    << : *SIM_BUILD_MATRIX_TEMPLATE
  build_script: cd test; ./setup_environment.sh $DEVICE; cd ..

dist_builder_task:
  container:
    dockerfile: contrib/build.Dockerfile
  << : *DIST_CACHE_TEMPLATE
  build_script:
    - contrib/build_bin.sh
    - contrib/build_dist.sh
    - sha256sum dist/*.tar.gz ||:

dist_test_task:
  matrix:
    << : *DEVICE_MATRIX_TEMPLATE
  << : *DIST_CACHE_TEMPLATE
  << : *BITCOIND_CACHE_TEMPLATE
  matrix:
    - name: $DEVICE Wheel
      install_script: pip install dist/*.whl
      test_script: cd test; ./run_tests.py $DEVICE --interface=cli --device-only; cd ..
    - name: $DEVICE Sdist
      install_script: pip install $(find dist -name "*.tar.gz" -a -not -name "*amd64*")
      test_script: cd test; ./run_tests.py $DEVICE --interface=cli --device-only; cd ..
    - name: $DEVICE Bindist
      install_script: poetry install
      test_script: cd test; poetry run ./run_tests.py $DEVICE --interface=bindist --device-only; cd ..
  on_failure:
    failed_script: tail -v -n +1 test/*.std*

device_test_task:
  matrix:
    << : *DEVICE_MATRIX_TEMPLATE
  << : *BITCOIND_CACHE_TEMPLATE
  matrix:
    - env:
        INTERFACE: library
    - env:
        INTERFACE: cli
    - env:
        INTERFACE: stdin
  name: $DEVICE $INTERFACE
  install_script: poetry install
  test_script: cd test; poetry run ./run_tests.py $DEVICE --interface=$INTERFACE --device-only; cd ..
  on_failure:
    failed_script: tail -v -n +1 test/*.std*
